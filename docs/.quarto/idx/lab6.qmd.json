{"title":"index","markdown":{"yaml":{"title":"index","subtitle":"Ecosystem Science and Sustainability 330","author":[{"name":"Chris Drew","email":"cdrew02@colostate.edu"}],"format":{"html":{"self-contained":true}},"execute":{"echo":true}},"headingText":"Map for aridity","containsRefs":false,"markdown":"\n\n\n```{r}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tidypredict)\nlibrary(nnet)\nlibrary(baguette)\nlibrary(vip)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(powerjoin)\n\n```\n\n```{r load-data}\nlibrary(tidyverse)\nlibrary(glue)\n\nroot <- 'https://gdex.ucar.edu/dataset/camels/file'  # ðŸ”§ Define root BEFORE glue\ntypes <- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\nremote_files  <- glue('{root}/camels_{types}.txt')\nlocal_files   <- glue('data/camels_{types}.txt')\n\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\ncamels <- map(remote_files, read_delim, show_col_types = FALSE) |> \n  power_full_join(by = 'gauge_id')\n\n```\n\n#question 1: zero_q_freq represents the percentage of days with zero streamflow (0 mm/day) in a given period, providing insight into hydrological extremes and water behavior in the drainage area.\n\n```{r}\nggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"gray50\") +\n  geom_point(aes(color = q_mean)) +\n  scale_color_gradient(low = \"pink\", high = \"dodgerblue\") +\n  ggthemes::theme_map()\n```\n\n```{r}\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(patchwork)\n\nlibrary(ggplot2)\nlibrary(viridis)\n\nmap_aridity <- ggplot(camels, aes(x = gauge_lon, y = gauge_lat)) + \n  geom_point(aes(color = aridity)) + \n  scale_color_viridis_c() +\n  theme_minimal() + \n  labs(title = \"Aridity of Sites\", \n       color = \"Aridity\")\n\n# Map for p_mean (mean rainfall)\nmap_p_mean <- ggplot(camels, aes(x = gauge_lon, y = gauge_lat)) + \n  geom_point(aes(color = p_mean)) + \n  scale_color_viridis_c() +\n  theme_minimal() + \n  labs(title = \"Mean Rainfall (p_mean) of Sites\", \n       color = \"Mean Rainfall\")\n\n# Combine maps using patchwork\nlibrary(patchwork)\ncombined_maps <- map_aridity + map_p_mean + plot_layout(ncol = 1)\n\n# Display the combined maps\nprint(combined_maps)\n\n\n\n\n```\n```{r}\n# Load libraries\nlibrary(tidymodels)\nlibrary(baguette)    # For neural network (bag_mlp)\nlibrary(xgboost)     # For XGBoost model\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n# Set seed for reproducibility\nset.seed(123)\n\n# --- Data Preparation ---\n# Log-transform target variable 'q_mean' to create 'logQmean'\ncamels <- camels %>% mutate(logQmean = log(q_mean))\n\n# Split data: 80% for training, 20% for testing\ncamels_split <- initial_split(camels, prop = 0.8)\ncamels_train <- training(camels_split)\ncamels_test  <- testing(camels_split)\n\n# 5-fold cross-validation for faster processing\ncamels_cv <- vfold_cv(camels_train, v = 5)\n\n# --- Preprocessing Recipe ---\n# Predict logQmean using aridity and p_mean\n# Log-transform predictors and add an interaction term\nrec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%\n  step_log(all_predictors()) %>%               # Log-transform predictors\n  step_interact(terms = ~ aridity:p_mean) %>%   # Add interaction term\n  step_naomit(all_predictors(), all_outcomes()) # Remove rows with missing data\n\n# --- Model Specifications ---\n# 1. Linear Regression (baseline)\nlm_model <- linear_reg() %>% \n  set_engine(\"lm\") %>% \n  set_mode(\"regression\")\n\n# 2. Random Forest Model\nrf_model <- rand_forest() %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"regression\")\n\n# 3. XGBoost Model\nxgb_model <- boost_tree(\n  trees = 1000,   # Number of trees\n  tree_depth = 6, # Max depth of trees\n  min_n = 10,     # Min observations per node\n  learn_rate = 0.01 # Learning rate\n) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"regression\")\n\n# 4. Neural Network (bag_mlp) Model\nnn_model <- bag_mlp(\n  hidden_units = 100, # Number of hidden units\n  epochs = 50         # Reduced epochs for quicker testing\n) %>% \n  set_engine(\"nnet\") %>% \n  set_mode(\"regression\")\n\n# --- Create Workflow Set ---\n# Combine the recipe and all models into a workflow set\nwf_set <- workflow_set(\n  preproc = list(rec),\n  models  = list(\n    lm  = lm_model,\n    rf  = rf_model,\n    xgb = xgb_model,\n    nn  = nn_model\n  )\n)\n\n# --- Fit Models with Resampling ---\n# Use 5-fold CV to fit each model in the workflow\nwf_res <- wf_set %>% \n  workflow_map(\"fit_resamples\", \n               resamples = camels_cv, \n               seed = 123, \n               verbose = TRUE)\n\n# --- Evaluate Model Performance ---\n# Collect metrics (e.g., RMSE, R-squared, MAE)\nmodel_metrics <- wf_res %>% collect_metrics()\nprint(model_metrics)\n\n# Rank models based on RMSE (lower is better) or R-squared (higher is better)\nranked_results <- rank_results(wf_res, rank_metric = \"rmse\", select_best = TRUE)\nprint(ranked_results)\n\n# --- Extract the Best Model ---\n# Assume XGBoost is the best based on RMSE (adjust if necessary)\nbest_wf <- wf_res %>%\n  extract_workflow(\"recipe_xgb\") %>%  # Replace with the best model id if different\n  fit(data = camels_train)\n\n# --- Make Predictions on Test Data ---\nbest_preds <- predict(best_wf, new_data = camels_test) %>% \n  bind_cols(camels_test)\n\n# Evaluate the best model's performance on the test data\ntest_metrics <- metrics(best_preds, truth = logQmean, estimate = .pred)\nprint(test_metrics)\n\n# --- Visualize: Observed vs. Predicted ---\n# Plot observed vs predicted values, colored by aridity\nggplot(best_preds, aes(x = logQmean, y = .pred, color = aridity)) +\n  geom_point() +\n  geom_abline(linetype = \"dashed\") +\n  scale_color_viridis_c() +\n  theme_minimal() +\n  labs(title = \"Best Model Predictions vs. Observed Log Mean Flow\",\n       x = \"Observed logQmean\",\n       y = \"Predicted logQmean\",\n       color = \"Aridity\")\n\n\n```\n#Question 3: I would probably move forward with the neural-network model because it has the lowest RMSE and highest R-squared among the models indicating the best predicability performance.\n\n```{r}\n# Load libraries\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(powerjoin)    # For merging data frames\nlibrary(tidymodels)\nlibrary(baguette)     # For neural network model\nlibrary(xgboost)      # For XGBoost\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(patchwork)\nsetwd(\"C:/Users/Cadre/git/Lab 6/Lab 6\")\n\n# Set seed for reproducibility\nset.seed(123)\n\n# --------------------------------------------------\n# 1. Download and Merge CAMELS Data\n# --------------------------------------------------\n# URLs for CAMELS data files\nroot <- 'https://gdex.ucar.edu/dataset/camels/file'\ntypes <- c(\"clim\", \"geol\", \"hydro\", \"soil\", \"topo\", \"vege\")\nremote_files <- glue('{root}/camels_{types}.txt')\nlocal_files  <- glue('data/camels_{types}.txt')\n\n# Download files if they don't exist\nwalk2(remote_files, local_files, ~{\n  if(!file.exists(.y)) download.file(.x, destfile = .y, quiet = TRUE)\n})\n\n# Read files into list of data frames\ncamels_list <- map(local_files, read_delim, show_col_types = FALSE)\n\n# Merge data frames on 'gauge_id'\ncamels <- power_full_join(camels_list, by = 'gauge_id')\n\n# --------------------------------------------------\n# 2. Data Preparation & Splitting\n# --------------------------------------------------\n# Create log-transformed target variable (logQmean)\ncamels <- camels %>% mutate(logQmean = log(q_mean))\n\n# Split data into 75% training and 25% testing\ndata_split <- initial_split(camels, prop = 0.75)\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n\n# Create 10-fold cross-validation for training\ncv_folds <- vfold_cv(train_data, v = 10)\n\n# --------------------------------------------------\n# 3. Define Recipe (Data Preprocessing)\n# --------------------------------------------------\n# Choose predictors that affect streamflow\nrecipe_model <- recipe(logQmean ~ aridity + p_mean + elev_mean, data = train_data) %>%\n  step_log(all_numeric_predictors()) %>%    # Log-transform predictors\n  step_interact(terms = ~ aridity:p_mean) %>%  # Add interaction between aridity and p_mean\n  step_normalize(all_numeric_predictors()) %>% # Normalize predictors\n  step_naomit(all_predictors(), all_outcomes()) # Remove missing values\n\n# --------------------------------------------------\n# 4. Define Models\n# --------------------------------------------------\n# Random Forest Model\nrf_model <- rand_forest() %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"regression\")\n\n# XGBoost Model\nxgb_model <- boost_tree(\n  trees = 1000,\n  tree_depth = 6,\n  min_n = 10,\n  learn_rate = 0.01\n) %>% \n  set_engine(\"xgboost\") %>% \n  set_mode(\"regression\")\n\n# Neural Network Model\nnn_model <- bag_mlp(\n  hidden_units = 100,\n  epochs = 50  # Reduced epochs for faster processing\n) %>% \n  set_engine(\"nnet\") %>% \n  set_mode(\"regression\")\n\n# --------------------------------------------------\n# 5. Build Workflow Set\n# --------------------------------------------------\n# Combine the recipe and models into a workflow set\nwf_set <- workflow_set(\n  preproc = list(recipe_model),\n  models  = list(\n    rf  = rf_model,\n    xgb = xgb_model,\n    nn  = nn_model\n  )\n)\n\n# --------------------------------------------------\n# 6. Fit Models via Resampling\n# --------------------------------------------------\n# Fit each model using 10-fold cross-validation\nwf_res <- wf_set %>% \n  workflow_map(\"fit_resamples\", \n               resamples = cv_folds, \n               seed = 123, \n               verbose = TRUE)\n\n# --------------------------------------------------\n# 7. Evaluate and Compare Models\n# --------------------------------------------------\n# Collect performance metrics (e.g., RMSE, R-squared)\nmodel_metrics <- wf_res %>% collect_metrics()\nprint(model_metrics)\n\n# Rank models based on RMSE (lower is better)\nranked_results <- rank_results(wf_res, rank_metric = \"rmse\", select_best = TRUE)\nprint(ranked_results)\n\n# --------------------------------------------------\n# 8. Evaluate Best Model on Test Data\n# --------------------------------------------------\n# Extract best model (based on previous ranking)\nbest_wf <- wf_res %>%\n  extract_workflow(\"recipe_xgb\") %>%  # Use the best model id from ranked_results\n  fit(data = train_data)\n\n# Make predictions on the test data\nbest_preds <- predict(best_wf, new_data = test_data) %>% \n  bind_cols(test_data)\n\n# Evaluate performance on test data\ntest_metrics <- metrics(best_preds, truth = logQmean, estimate = .pred)\nprint(test_metrics)\n\n# Visualize observed vs. predicted values (colored by aridity)\nggplot(best_preds, aes(x = logQmean, y = .pred, color = aridity)) +\n  geom_point() +\n  geom_abline(linetype = \"dashed\") +\n  scale_color_viridis_c() +\n  theme_minimal() +\n  labs(title = \"Test Data: Observed vs Predicted Log Mean Flow\",\n       x = \"Observed logQmean\",\n       y = \"Predicted logQmean\",\n       color = \"Aridity\")\n\n```\n#the model performs pretty good, closely matching observed values for wetter regions but it underpredicts streamflow in drier more arid basins, as seen by the scatter below the 1x1 line.\n","srcMarkdownNoYaml":"\n\n\n```{r}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tidypredict)\nlibrary(nnet)\nlibrary(baguette)\nlibrary(vip)\nlibrary(patchwork)\nlibrary(glue)\nlibrary(powerjoin)\n\n```\n\n```{r load-data}\nlibrary(tidyverse)\nlibrary(glue)\n\nroot <- 'https://gdex.ucar.edu/dataset/camels/file'  # ðŸ”§ Define root BEFORE glue\ntypes <- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\nremote_files  <- glue('{root}/camels_{types}.txt')\nlocal_files   <- glue('data/camels_{types}.txt')\n\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\ncamels <- map(remote_files, read_delim, show_col_types = FALSE) |> \n  power_full_join(by = 'gauge_id')\n\n```\n\n#question 1: zero_q_freq represents the percentage of days with zero streamflow (0 mm/day) in a given period, providing insight into hydrological extremes and water behavior in the drainage area.\n\n```{r}\nggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"gray50\") +\n  geom_point(aes(color = q_mean)) +\n  scale_color_gradient(low = \"pink\", high = \"dodgerblue\") +\n  ggthemes::theme_map()\n```\n\n```{r}\nlibrary(ggplot2)\nlibrary(viridis)\nlibrary(patchwork)\n\nlibrary(ggplot2)\nlibrary(viridis)\n\n# Map for aridity\nmap_aridity <- ggplot(camels, aes(x = gauge_lon, y = gauge_lat)) + \n  geom_point(aes(color = aridity)) + \n  scale_color_viridis_c() +\n  theme_minimal() + \n  labs(title = \"Aridity of Sites\", \n       color = \"Aridity\")\n\n# Map for p_mean (mean rainfall)\nmap_p_mean <- ggplot(camels, aes(x = gauge_lon, y = gauge_lat)) + \n  geom_point(aes(color = p_mean)) + \n  scale_color_viridis_c() +\n  theme_minimal() + \n  labs(title = \"Mean Rainfall (p_mean) of Sites\", \n       color = \"Mean Rainfall\")\n\n# Combine maps using patchwork\nlibrary(patchwork)\ncombined_maps <- map_aridity + map_p_mean + plot_layout(ncol = 1)\n\n# Display the combined maps\nprint(combined_maps)\n\n\n\n\n```\n```{r}\n# Load libraries\nlibrary(tidymodels)\nlibrary(baguette)    # For neural network (bag_mlp)\nlibrary(xgboost)     # For XGBoost model\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n# Set seed for reproducibility\nset.seed(123)\n\n# --- Data Preparation ---\n# Log-transform target variable 'q_mean' to create 'logQmean'\ncamels <- camels %>% mutate(logQmean = log(q_mean))\n\n# Split data: 80% for training, 20% for testing\ncamels_split <- initial_split(camels, prop = 0.8)\ncamels_train <- training(camels_split)\ncamels_test  <- testing(camels_split)\n\n# 5-fold cross-validation for faster processing\ncamels_cv <- vfold_cv(camels_train, v = 5)\n\n# --- Preprocessing Recipe ---\n# Predict logQmean using aridity and p_mean\n# Log-transform predictors and add an interaction term\nrec <- recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%\n  step_log(all_predictors()) %>%               # Log-transform predictors\n  step_interact(terms = ~ aridity:p_mean) %>%   # Add interaction term\n  step_naomit(all_predictors(), all_outcomes()) # Remove rows with missing data\n\n# --- Model Specifications ---\n# 1. Linear Regression (baseline)\nlm_model <- linear_reg() %>% \n  set_engine(\"lm\") %>% \n  set_mode(\"regression\")\n\n# 2. Random Forest Model\nrf_model <- rand_forest() %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"regression\")\n\n# 3. XGBoost Model\nxgb_model <- boost_tree(\n  trees = 1000,   # Number of trees\n  tree_depth = 6, # Max depth of trees\n  min_n = 10,     # Min observations per node\n  learn_rate = 0.01 # Learning rate\n) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"regression\")\n\n# 4. Neural Network (bag_mlp) Model\nnn_model <- bag_mlp(\n  hidden_units = 100, # Number of hidden units\n  epochs = 50         # Reduced epochs for quicker testing\n) %>% \n  set_engine(\"nnet\") %>% \n  set_mode(\"regression\")\n\n# --- Create Workflow Set ---\n# Combine the recipe and all models into a workflow set\nwf_set <- workflow_set(\n  preproc = list(rec),\n  models  = list(\n    lm  = lm_model,\n    rf  = rf_model,\n    xgb = xgb_model,\n    nn  = nn_model\n  )\n)\n\n# --- Fit Models with Resampling ---\n# Use 5-fold CV to fit each model in the workflow\nwf_res <- wf_set %>% \n  workflow_map(\"fit_resamples\", \n               resamples = camels_cv, \n               seed = 123, \n               verbose = TRUE)\n\n# --- Evaluate Model Performance ---\n# Collect metrics (e.g., RMSE, R-squared, MAE)\nmodel_metrics <- wf_res %>% collect_metrics()\nprint(model_metrics)\n\n# Rank models based on RMSE (lower is better) or R-squared (higher is better)\nranked_results <- rank_results(wf_res, rank_metric = \"rmse\", select_best = TRUE)\nprint(ranked_results)\n\n# --- Extract the Best Model ---\n# Assume XGBoost is the best based on RMSE (adjust if necessary)\nbest_wf <- wf_res %>%\n  extract_workflow(\"recipe_xgb\") %>%  # Replace with the best model id if different\n  fit(data = camels_train)\n\n# --- Make Predictions on Test Data ---\nbest_preds <- predict(best_wf, new_data = camels_test) %>% \n  bind_cols(camels_test)\n\n# Evaluate the best model's performance on the test data\ntest_metrics <- metrics(best_preds, truth = logQmean, estimate = .pred)\nprint(test_metrics)\n\n# --- Visualize: Observed vs. Predicted ---\n# Plot observed vs predicted values, colored by aridity\nggplot(best_preds, aes(x = logQmean, y = .pred, color = aridity)) +\n  geom_point() +\n  geom_abline(linetype = \"dashed\") +\n  scale_color_viridis_c() +\n  theme_minimal() +\n  labs(title = \"Best Model Predictions vs. Observed Log Mean Flow\",\n       x = \"Observed logQmean\",\n       y = \"Predicted logQmean\",\n       color = \"Aridity\")\n\n\n```\n#Question 3: I would probably move forward with the neural-network model because it has the lowest RMSE and highest R-squared among the models indicating the best predicability performance.\n\n```{r}\n# Load libraries\nlibrary(tidyverse)\nlibrary(glue)\nlibrary(powerjoin)    # For merging data frames\nlibrary(tidymodels)\nlibrary(baguette)     # For neural network model\nlibrary(xgboost)      # For XGBoost\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(patchwork)\nsetwd(\"C:/Users/Cadre/git/Lab 6/Lab 6\")\n\n# Set seed for reproducibility\nset.seed(123)\n\n# --------------------------------------------------\n# 1. Download and Merge CAMELS Data\n# --------------------------------------------------\n# URLs for CAMELS data files\nroot <- 'https://gdex.ucar.edu/dataset/camels/file'\ntypes <- c(\"clim\", \"geol\", \"hydro\", \"soil\", \"topo\", \"vege\")\nremote_files <- glue('{root}/camels_{types}.txt')\nlocal_files  <- glue('data/camels_{types}.txt')\n\n# Download files if they don't exist\nwalk2(remote_files, local_files, ~{\n  if(!file.exists(.y)) download.file(.x, destfile = .y, quiet = TRUE)\n})\n\n# Read files into list of data frames\ncamels_list <- map(local_files, read_delim, show_col_types = FALSE)\n\n# Merge data frames on 'gauge_id'\ncamels <- power_full_join(camels_list, by = 'gauge_id')\n\n# --------------------------------------------------\n# 2. Data Preparation & Splitting\n# --------------------------------------------------\n# Create log-transformed target variable (logQmean)\ncamels <- camels %>% mutate(logQmean = log(q_mean))\n\n# Split data into 75% training and 25% testing\ndata_split <- initial_split(camels, prop = 0.75)\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n\n# Create 10-fold cross-validation for training\ncv_folds <- vfold_cv(train_data, v = 10)\n\n# --------------------------------------------------\n# 3. Define Recipe (Data Preprocessing)\n# --------------------------------------------------\n# Choose predictors that affect streamflow\nrecipe_model <- recipe(logQmean ~ aridity + p_mean + elev_mean, data = train_data) %>%\n  step_log(all_numeric_predictors()) %>%    # Log-transform predictors\n  step_interact(terms = ~ aridity:p_mean) %>%  # Add interaction between aridity and p_mean\n  step_normalize(all_numeric_predictors()) %>% # Normalize predictors\n  step_naomit(all_predictors(), all_outcomes()) # Remove missing values\n\n# --------------------------------------------------\n# 4. Define Models\n# --------------------------------------------------\n# Random Forest Model\nrf_model <- rand_forest() %>% \n  set_engine(\"ranger\", importance = \"impurity\") %>% \n  set_mode(\"regression\")\n\n# XGBoost Model\nxgb_model <- boost_tree(\n  trees = 1000,\n  tree_depth = 6,\n  min_n = 10,\n  learn_rate = 0.01\n) %>% \n  set_engine(\"xgboost\") %>% \n  set_mode(\"regression\")\n\n# Neural Network Model\nnn_model <- bag_mlp(\n  hidden_units = 100,\n  epochs = 50  # Reduced epochs for faster processing\n) %>% \n  set_engine(\"nnet\") %>% \n  set_mode(\"regression\")\n\n# --------------------------------------------------\n# 5. Build Workflow Set\n# --------------------------------------------------\n# Combine the recipe and models into a workflow set\nwf_set <- workflow_set(\n  preproc = list(recipe_model),\n  models  = list(\n    rf  = rf_model,\n    xgb = xgb_model,\n    nn  = nn_model\n  )\n)\n\n# --------------------------------------------------\n# 6. Fit Models via Resampling\n# --------------------------------------------------\n# Fit each model using 10-fold cross-validation\nwf_res <- wf_set %>% \n  workflow_map(\"fit_resamples\", \n               resamples = cv_folds, \n               seed = 123, \n               verbose = TRUE)\n\n# --------------------------------------------------\n# 7. Evaluate and Compare Models\n# --------------------------------------------------\n# Collect performance metrics (e.g., RMSE, R-squared)\nmodel_metrics <- wf_res %>% collect_metrics()\nprint(model_metrics)\n\n# Rank models based on RMSE (lower is better)\nranked_results <- rank_results(wf_res, rank_metric = \"rmse\", select_best = TRUE)\nprint(ranked_results)\n\n# --------------------------------------------------\n# 8. Evaluate Best Model on Test Data\n# --------------------------------------------------\n# Extract best model (based on previous ranking)\nbest_wf <- wf_res %>%\n  extract_workflow(\"recipe_xgb\") %>%  # Use the best model id from ranked_results\n  fit(data = train_data)\n\n# Make predictions on the test data\nbest_preds <- predict(best_wf, new_data = test_data) %>% \n  bind_cols(test_data)\n\n# Evaluate performance on test data\ntest_metrics <- metrics(best_preds, truth = logQmean, estimate = .pred)\nprint(test_metrics)\n\n# Visualize observed vs. predicted values (colored by aridity)\nggplot(best_preds, aes(x = logQmean, y = .pred, color = aridity)) +\n  geom_point() +\n  geom_abline(linetype = \"dashed\") +\n  scale_color_viridis_c() +\n  theme_minimal() +\n  labs(title = \"Test Data: Observed vs Predicted Log Mean Flow\",\n       x = \"Observed logQmean\",\n       y = \"Predicted logQmean\",\n       color = \"Aridity\")\n\n```\n#the model performs pretty good, closely matching observed values for wetter regions but it underpredicts streamflow in drier more arid basins, as seen by the scatter below the 1x1 line.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","self-contained":true,"output-file":"lab6.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"index","subtitle":"Ecosystem Science and Sustainability 330","author":[{"name":"Chris Drew","email":"cdrew02@colostate.edu"}]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}