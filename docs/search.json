[
  {
    "objectID": "hyperparameter-tuning.html",
    "href": "hyperparameter-tuning.html",
    "title": "hyperparameter-tuning",
    "section": "",
    "text": "library(tidyverse)\nlibrary(tidymodels)\nlibrary(powerjoin)\nlibrary(skimr)\nlibrary(visdat)\nlibrary(patchwork)\nlibrary(yardstick)\nlibrary(readr)\nlibrary(purrr)\nlibrary(stringr)\nlibrary(doParallel)\nlibrary(ggpubr)\n\nregisterDoParallel(cores = parallel::detectCores() - 1)\n\n# Data Import -------------------------------------------------------------\n# Verify working directory\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\nCurrent working directory: C:/Users/Cadre/git/Lab 6 \n\ndata_path &lt;- \"C:/Users/Cadre/git/Lab 6/data/\"\nsetwd(\"C:/Users/Cadre/git/Lab 6\")\n\ncat(\"Current working directory:\", getwd(), \"\\n\")\n\nCurrent working directory: C:/Users/Cadre/git/Lab 6 \n\n# file search\nfile_paths &lt;- list.files(\n  path = data_path,\n  pattern = \"camels_.*\\\\.txt$\",\n  full.names = TRUE,\n  ignore.case = TRUE\n)\n\ncat(\"Looking in:\", data_path, \"\\n\")\n\nLooking in: C:/Users/Cadre/git/Lab 6/data/ \n\ncat(\"Found files:\", paste(basename(file_paths), collapse = \", \"), \"\\n\\n\")\n\nFound files: camels_clim.txt, camels_geol.txt, camels_hydro.txt, camels_soil.txt, camels_topo.txt, camels_vege.txt \n\nif (length(file_paths) == 0) {\n  cat(\"Directory contents:\\n\")\n  print(list.files(data_path))\n  stop(\"No CAMELS files found. Verify files exist in:\\n\", normalizePath(data_path))\n}\n\ndata_list &lt;- file_paths |&gt;\n  set_names(basename(file_paths)) |&gt;\n  map(~ read_delim(.x, delim = \";\", show_col_types = FALSE))\n\n# Validate expected file count\nif (length(data_list) != 6) {\n  cat(\"Missing files. Expected 6, found\", length(data_list), \"\\n\")\n  print(list.files(data_path))\n  stop(\"CAMELS data incomplete\")\n}\n\n# Standardize column names\ndata_list &lt;- data_list |&gt; \n  map(~ {\n    colnames(.x) &lt;- tolower(colnames(.x))\n    if (!\"gauge_id\" %in% colnames(.x)) {\n      variants &lt;- c(\"gaugeid\", \"gauge\", \"id\", \"gauge.id\")\n      found &lt;- variants[variants %in% colnames(.x)]\n      if (length(found) &gt; 0) {\n        cat(\"Renaming\", found[1], \"to gauge_id\\n\")\n        .x &lt;- rename(.x, gauge_id = all_of(found[1]))\n      } else {\n        stop(\"No gauge_id column found\")\n      }\n    }\n    .x\n  })\n\nstopifnot(\n  \"gauge_id missing in some files\" = \n    all(map_lgl(data_list, ~ \"gauge_id\" %in% colnames(.x)))\n)\n\n# Join the CAMELS data\n\ncamels_raw &lt;- reduce(\n  data_list,\n  ~ power_full_join(.x, .y, by = \"gauge_id\", conflict = coalesce),\n  .init = data_list[[1]]\n)\n\nstopifnot(\"Merge failed - camels_raw is NULL\" = !is.null(camels_raw))\nglimpse(camels_raw)\n\nRows: 671\nColumns: 58\n$ gauge_id             &lt;chr&gt; \"01013500\", \"01022500\", \"01030500\", \"01031500\", \"…\n$ p_mean               &lt;dbl&gt; 3.126679, 3.608126, 3.274405, 3.522957, 3.323146,…\n$ pet_mean             &lt;dbl&gt; 1.971555, 2.119256, 2.043594, 2.071324, 2.090024,…\n$ p_seasonality        &lt;dbl&gt; 0.187940259, -0.114529586, 0.047358189, 0.1040905…\n$ frac_snow            &lt;dbl&gt; 0.3134404, 0.2452590, 0.2770184, 0.2918365, 0.280…\n$ aridity              &lt;dbl&gt; 0.6305587, 0.5873564, 0.6241114, 0.5879503, 0.628…\n$ high_prec_freq       &lt;dbl&gt; 12.95, 20.55, 17.15, 18.90, 20.10, 13.50, 17.50, …\n$ high_prec_dur        &lt;dbl&gt; 1.348958, 1.205279, 1.207746, 1.148936, 1.165217,…\n$ high_prec_timing     &lt;chr&gt; \"son\", \"son\", \"son\", \"son\", \"son\", \"jja\", \"son\", …\n$ low_prec_freq        &lt;dbl&gt; 202.20, 233.65, 215.60, 227.35, 235.90, 193.50, 2…\n$ low_prec_dur         &lt;dbl&gt; 3.427119, 3.662226, 3.514262, 3.473644, 3.691706,…\n$ low_prec_timing      &lt;chr&gt; \"mam\", \"jja\", \"djf\", \"djf\", \"djf\", \"mam\", \"mam\", …\n$ geol_1st_class       &lt;chr&gt; \"Siliciclastic sedimentary rocks\", \"Acid plutonic…\n$ glim_1st_class_frac  &lt;dbl&gt; 0.8159044, 0.5906582, 0.5733054, 0.4489279, 0.308…\n$ geol_2nd_class       &lt;chr&gt; \"Basic volcanic rocks\", \"Siliciclastic sedimentar…\n$ glim_2nd_class_frac  &lt;dbl&gt; 0.17972945, 0.16461821, 0.28701001, 0.44386282, 0…\n$ carbonate_rocks_frac &lt;dbl&gt; 0.000000000, 0.000000000, 0.052140094, 0.02625797…\n$ geol_porostiy        &lt;dbl&gt; 0.1714, 0.0710, 0.1178, 0.0747, 0.0522, 0.0711, 0…\n$ geol_permeability    &lt;dbl&gt; -14.7019, -14.2138, -14.4918, -14.8410, -14.4819,…\n$ q_mean               &lt;dbl&gt; 1.699155, 2.173062, 1.820108, 2.030242, 2.182870,…\n$ runoff_ratio         &lt;dbl&gt; 0.5434375, 0.6022689, 0.5558590, 0.5762893, 0.656…\n$ slope_fdc            &lt;dbl&gt; 1.528219, 1.776280, 1.871110, 1.494019, 1.415939,…\n$ baseflow_index       &lt;dbl&gt; 0.5852260, 0.5544784, 0.5084407, 0.4450905, 0.473…\n$ stream_elas          &lt;dbl&gt; 1.8453242, 1.7027824, 1.3775052, 1.6486930, 1.510…\n$ q5                   &lt;dbl&gt; 0.24110613, 0.20473436, 0.10714920, 0.11134535, 0…\n$ q95                  &lt;dbl&gt; 6.373021, 7.123049, 6.854887, 8.010503, 8.095148,…\n$ high_q_freq          &lt;dbl&gt; 6.10, 3.90, 12.25, 18.90, 14.95, 14.10, 16.05, 16…\n$ high_q_dur           &lt;dbl&gt; 8.714286, 2.294118, 7.205882, 3.286957, 2.577586,…\n$ low_q_freq           &lt;dbl&gt; 41.35, 65.15, 89.25, 94.80, 71.55, 58.90, 82.20, …\n$ low_q_dur            &lt;dbl&gt; 20.170732, 17.144737, 19.402174, 14.697674, 12.77…\n$ zero_q_freq          &lt;dbl&gt; 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0…\n$ hfd_mean             &lt;dbl&gt; 207.25, 166.25, 184.90, 181.00, 184.80, 197.20, 1…\n$ soil_depth_pelletier &lt;dbl&gt; 7.4047619, 17.4128079, 19.0114144, 7.2525570, 5.3…\n$ soil_depth_statsgo   &lt;dbl&gt; 1.248408, 1.491846, 1.461363, 1.279047, 1.392779,…\n$ soil_porosity        &lt;dbl&gt; 0.4611488, 0.4159055, 0.4590910, 0.4502360, 0.422…\n$ soil_conductivity    &lt;dbl&gt; 1.106522, 2.375005, 1.289807, 1.373292, 2.615154,…\n$ max_water_content    &lt;dbl&gt; 0.5580548, 0.6262289, 0.6530198, 0.5591227, 0.561…\n$ sand_frac            &lt;dbl&gt; 27.84183, 59.39016, 32.23546, 35.26903, 55.16313,…\n$ silt_frac            &lt;dbl&gt; 55.15694, 28.08094, 51.77918, 50.84123, 34.18544,…\n$ clay_frac            &lt;dbl&gt; 16.275732, 12.037646, 14.776824, 12.654125, 10.30…\n$ water_frac           &lt;dbl&gt; 5.3766978, 1.2269127, 1.6343449, 0.6745936, 0.000…\n$ organic_frac         &lt;dbl&gt; 0.4087168, 0.0000000, 1.3302776, 0.0000000, 0.000…\n$ other_frac           &lt;dbl&gt; 0.0000000, 0.3584723, 0.0220161, 0.0000000, 0.147…\n$ gauge_lat            &lt;dbl&gt; 47.23739, 44.60797, 45.50097, 45.17501, 44.86920,…\n$ gauge_lon            &lt;dbl&gt; -68.58264, -67.93524, -68.30596, -69.31470, -69.9…\n$ elev_mean            &lt;dbl&gt; 250.31, 92.68, 143.80, 247.80, 310.38, 615.70, 47…\n$ slope_mean           &lt;dbl&gt; 21.64152, 17.79072, 12.79195, 29.56035, 49.92122,…\n$ area_gages2          &lt;dbl&gt; 2252.70, 573.60, 3676.17, 769.05, 909.10, 383.82,…\n$ area_geospa_fabric   &lt;dbl&gt; 2303.95, 620.38, 3676.09, 766.53, 904.94, 396.10,…\n$ frac_forest          &lt;dbl&gt; 0.9063, 0.9232, 0.8782, 0.9548, 0.9906, 1.0000, 1…\n$ lai_max              &lt;dbl&gt; 4.167304, 4.871392, 4.685200, 4.903259, 5.086811,…\n$ lai_diff             &lt;dbl&gt; 3.340732, 3.746692, 3.665543, 3.990843, 4.300978,…\n$ gvf_max              &lt;dbl&gt; 0.8045674, 0.8639358, 0.8585020, 0.8706685, 0.891…\n$ gvf_diff             &lt;dbl&gt; 0.3716482, 0.3377125, 0.3513934, 0.3986194, 0.445…\n$ dom_land_cover_frac  &lt;dbl&gt; 0.8834519, 0.8204934, 0.9752580, 1.0000000, 0.850…\n$ dom_land_cover       &lt;chr&gt; \"    Mixed Forests\", \"    Mixed Forests\", \"    Mi…\n$ root_depth_50        &lt;dbl&gt; NA, 0.2374345, NA, 0.2500000, 0.2410270, 0.225615…\n$ root_depth_99        &lt;dbl&gt; NA, 2.238444, NA, 2.400000, 2.340180, 2.237435, 2…\n\n# Data Cleaning---\ncamels_clean &lt;- camels_raw |&gt; \n  distinct() |&gt; \n  na.omit() |&gt; \n  mutate(across(where(is.character), as_factor)) |&gt; \n  relocate(gauge_lat, gauge_lon, .after = last_col())\n\nstopifnot(\"q_mean must exist\" = \"q_mean\" %in% names(camels_clean))\n\n# Data Splitting\nset.seed(123)\nsplit &lt;- initial_split(camels_clean, prop = 0.8)\ntrain &lt;- training(split)\ntest &lt;- testing(split)\n\nmodel_recipe &lt;- recipe(q_mean ~ ., data = train) |&gt; \n  step_rm(gauge_lat, gauge_lon) |&gt;  # Remove from predictors\n  step_normalize(all_numeric_predictors()) |&gt; \n  step_dummy(all_nominal_predictors())\n\n# Recipe Validation\nprepped &lt;- prep(model_recipe, training = train)\nbaked &lt;- bake(prepped, new_data = train)\nstopifnot(\"Coordinates should persist\" = c(\"gauge_lat\", \"gauge_lon\") %in% names(train))\nstopifnot(\"Coordinates removed from predictors\" = !any(c(\"gauge_lat\", \"gauge_lon\") %in% names(baked)))\n\n\n# Model\n\n# Define 3 Models\nlinear_model &lt;- linear_reg() |&gt; \n  set_engine(\"lm\") |&gt; \n  set_mode(\"regression\")\n\nrf_model &lt;- rand_forest(\n  mode = \"regression\",\n  engine = \"ranger\",\n  mtry = tune(),\n  trees = tune()\n)\n\nboost_model &lt;- boost_tree(\n  mode = \"regression\",\n  engine = \"xgboost\",\n  learn_rate = tune(),\n  tree_depth = tune()\n)\n\n# Workflow Testing\nmodel_set &lt;- workflow_set(\n  preproc = list(recipe = model_recipe),\n  models = list(\n    linear = linear_model,\n    random_forest = rf_model,\n    boosted = boost_model\n  )\n)\n\nlibrary(doParallel)\nregisterDoParallel(cores = parallel::detectCores() - 1)\n\nfolds &lt;- vfold_cv(train, v = 3)\n\nresults &lt;- model_set |&gt; \n  workflow_map(\n    resamples = folds,\n    metrics = metric_set(yardstick::rmse, yardstick::rsq, yardstick::mae),\n    verbose = TRUE\n  )\n\n# Model Tuning \ntune_wf &lt;- workflow() |&gt; \n  add_recipe(model_recipe) |&gt; \n  add_model(rf_model)\n\ntune_params &lt;- extract_parameter_set_dials(tune_wf)\ntune_params &lt;- finalize(tune_params, train)\ntune_grid &lt;- grid_latin_hypercube(tune_params, size = 25)\n\n\ntuned_results &lt;- tune_grid(\n  tune_wf,\n  resamples = folds,\n  grid = tune_grid,\n  metrics = metric_set(yardstick::rmse, yardstick::rsq, yardstick::mae),\n  control = control_grid(save_pred = TRUE)\n)\n\n# Final Model \nbest_params &lt;- select_best(tuned_results, metric = \"mae\")\nfinal_wf &lt;- finalize_workflow(tune_wf, best_params)\n\nfinal_fit &lt;- last_fit(final_wf, split)\ntest_metrics &lt;- collect_metrics(final_fit)\n\n# Prediction Visualization ------------------------------------------------\npred_plot &lt;- collect_predictions(final_fit) |&gt; \n  ggplot(aes(q_mean, .pred)) +\n  geom_point(alpha = 0.5) +\n  geom_abline(color = \"red\") +\n  geom_smooth(method = \"lm\", color = \"blue\") +\n  labs(title = \"Final Model Predictions\",\n       x = \"Observed Streamflow (q_mean)\",\n       y = \"Predicted Streamflow\") +\n  theme_pubr()\n\n# Mapping \nfull_model &lt;- fit(final_wf, camels_clean)\nfull_pred &lt;- augment(full_model, camels_clean) |&gt; \n  mutate(residual = (q_mean - .pred)^2)\n\nus_map &lt;- map_data(\"state\")\n\npred_map &lt;- ggplot() +\n  geom_polygon(data = us_map, \n               aes(long, lat, group = group),\n               fill = \"gray90\") +\n  geom_point(data = full_pred, \n             aes(gauge_lon, gauge_lat, color = .pred),\n             size = 2) +\n  scale_color_viridis_c(\"Prediction\") +\n  coord_map() +\n  theme_void()\n\nresid_map &lt;- ggplot() +\n  geom_polygon(data = us_map, \n               aes(long, lat, group = group),\n               fill = \"gray90\") +\n  geom_point(data = full_pred, \n             aes(gauge_lon, gauge_lat, color = residual),\n             size = 2) +\n  scale_color_viridis_c(\"Residual\", option = \"magma\") +\n  coord_map() +\n  theme_void()\n\n# Combine outputs\npred_plot\n\n\n\n\n\n\n\n(pred_map | resid_map)"
  }
]